#!/usr/bin/python3
"""Module detects primary file type, and runs appropriate commands to
   produce pdf from that file type"""

import glob
import argparse
import sys
import subprocess
import os


def get_file():
    """Gets file type, and files"""
    tex = glob.glob("*.tex")
    markdown = glob.glob("*.md")
    dot = glob.glob("*.dot")
    ps = glob.glob("*.ps")
    restructured_text = glob.glob("*.rst")
    len_tex = len(tex)
    len_md = len(markdown)
    len_dot = len(dot)
    len_ps = len(ps)
    len_rst = len(restructured_text)
    if max(len_tex, len_rst, len_md, len_dot, len_ps) == len_tex:
        return tex, "latex"
    elif max(len_tex, len_rst, len_md, len_dot, len_ps) == len_rst:
        return restructured_text, "rst"
    elif max(len_tex, len_rst, len_md, len_dot, len_ps) == len_md:
        return markdown, "md"
    elif max(len_tex, len_rst, len_md, len_dot, len_ps) == len_dot:
        return dot, "dot"
    elif max(len_tex, len_rst, len_md, len_dot, len_ps) == len_ps:
        return ps, "ps"


def which(program):
    """Function that finds if program exists"""

    def is_exe(fpath):
        """Function to check if path is an executable"""
        return os.path.isfile(fpath) and os.access(fpath, os.X_OK)

    fpath, fname = os.path.split(program)
    if fpath:
        if is_exe(program):
            return program
    else:
        for path in os.environ["PATH"].split(os.pathsep):
            path = path.strip('"')
            exe_file = os.path.join(path, program)
            if is_exe(exe_file):
                return exe_file
    return None


def latexmk(files, args):
    if which("latexmk") != None:
        if args['clean'] is True:
            subprocess.run(["latexmk", "-c"])
            ext = ("*.aux", "*.fls", "*.maf", "*.mtc*", "*.stc*")
            for types in ext:
                files = glob.glob(types)
                for f in files:
                    os.remove(f)
        elif args['clean_all'] is True:
            subprocess.run(["latexmk", "-C"])
            ext = ("*.aux", "*.fls", "*.maf", "*.mtc*", "*.stc*")
            for types in ext:
                files = glob.glob(types)
                for f in files:
                    os.remove(f)
        else:
            subprocess.run(["latexmk", "-pdf", "--shell-escape"])
    elif which("pdflatex") != None:
        print("PDFLatex")


def rstmk(files, args):
    if which("rst2pdf") != None:
        if args['clean_all'] is True:
            files = glob.glob("*.pdf")
            for file in files:
                os.remove(file)
        else:
            for file in files:
                subprocess.run(["rst2pdf", file])


def mdmk(files, args):
    if which("pandoc") != None:
        if args['clean_all'] is True:
            files = glob.glob("*.pdf")
            for file in files:
                os.remove(file)
        else:
            for file in files:
                if 'template' in args and args['template']:
                    subprocess.run([
                        "pandoc", file, "-o",
                        os.path.splitext(file)[0] + ".pdf",
                        "--template=" + args['template'], '--listings', "-N"
                    ])
                else:
                    subprocess.run([
                        "pandoc", file, "-o",
                        os.path.splitext(file)[0] + ".pdf"
                    ])


def dotmk(files, args):
    if which("dot") != None:
        if args['clean_all'] is True:
            file = glob.glob("*.pdf")
            for file in files:
                os.remove(file)
        else:
            for file in files:
                subprocess.run([
                    "dot", file, "-Tpdf", "-o",
                    os.path.splitext(file)[0] + ".pdf"
                ])


def psmk(files, args):
    if which("ps2pdf") != None:
        if args['clean_all'] is True:
            file = glob.glob("*.pdf")
            for file in files:
                os.remove(file)
        else:
            for file in files:
                subprocess.run(
                    ["ps2pdf", file,
                     os.path.splitext(file)[0] + ".pdf"])


def main():
    """Main function"""
    parser = argparse.ArgumentParser()
    parser.add_argument('-c',
                        '--clean',
                        dest='clean',
                        action='store_true',
                        default=False,
                        help='Cleans non essential files excluding *.pdf')
    parser.add_argument('-C',
                        '--CLEAN',
                        dest='clean_all',
                        action='store_true',
                        default=False,
                        help='Cleans non essential files including *.pdf')
    parser.add_argument('file',
                        nargs='?',
                        default=None,
                        help='File to compile')
    parser.add_argument('--template', action='store')
    try:
        args = parser.parse_args(sys.argv[1:])
    except SystemExit as err:
        return err.code
    args = vars(args)

    if args['file'] != None:
        file = [args['file']]
        ext = file[0].split('.')[-1]
        if ext == "tex":
            file_type = "latex"
        elif ext == "md":
            file_type = "md"
        elif ext == "rst":
            file_type = "rst"
        elif ext == "dot":
            file_type = "dot"
        elif ext == "ps":
            file_type = "ps"
    else:
        file, file_type = get_file()
    if file_type == "latex":
        latexmk(file, args)
    elif file_type == "rst":
        rstmk(file, args)
    elif file_type == "md":
        mdmk(file, args)
    # elif file_type == "dot":
    #     dotmk(file, args)
    elif file_type == "ps":
        psmk(file, args)


if __name__ == "__main__":
    main()
